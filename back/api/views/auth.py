from http import HTTPStatus

from restless.preparers import FieldsPreparer
from flask import (
    g, send_from_directory, url_for, redirect, session, request, abort
)

from api.app import oauth, update_token, delete_token
from api.views import BaseResource
from api.models import User


WHOAMI = '/api/users/whoami/'


def root():
    """
    Renders HTML template that bootstraps vue application.

    The template and all static files are generated by the front container and
    are only present when in "production" mode. Otherwise, the front container
    is the development server and proxys API calls to back (this flask
    application).
    """
    return send_from_directory('../templates', 'index.html')


def oauth_start():
    # Kick off OAuth2 authorization.
    next = request.args.get('next', '/')
    if oauth.shanty.token:
        session['user'] = oauth.shanty.get(WHOAMI).json()
        return redirect(next)
    session['next'] = next
    redirect_uri = url_for('authorize', _external=True)
    return oauth.shanty.authorize_redirect(redirect_uri, in_fragment=True)


def oauth_authorize():
    # Return from OAuth2 Authorization
    next = session.pop('next', '/')
    update_token('shanty', oauth.shanty.authorize_access_token())
    session['user'] = oauth.shanty.get(WHOAMI).json()
    return redirect(next)


def oauth_end():
    next = request.args.get('next', '/')
    session.pop('user', None)
    delete_token('shanty')
    return redirect(next)


def login():
    next = request.args.get('next', '/')

    json = request.get_json()
    if json:
        username = json.get('username')
        password = json.get('password')
    else:
        username = request.form.get('username')
        password = request.form.get('password')

    try:
        user = User \
            .select() \
            .where(
                User.username==username,
                User.active==True
            ) \
            .get()
    except User.DoesNotExist:
        print(f'no user: {username}')
        abort(403)

    if not user.check_password(password):
        abort(403)

    session['authenticated'] = True
    session['user_pk'] = user._pk
    g.user = user

    return redirect(next)


def logout():
    next = request.args.get('next', '/')
    session.clear()
    g.user = None
    return redirect(next)


def get_logged_in_user():
    if session.get('authenticated'):
        if getattr(g, 'user', None):
            return g.user

        try:
            user = User \
                .select() \
                .where(
                    User.active==True,
                    User.id==session.get('user_pk')
                ) \
                .get()
            return user

        except User.DoesNotExist:
            pass


class WhoamiResource(BaseResource):
    preparer = FieldsPreparer(fields={
        'username': 'username',
        'name': 'name',
        'active': 'active',
    })

    def detail(self):
        "Details of a particular service."
        return get_logged_in_user()
